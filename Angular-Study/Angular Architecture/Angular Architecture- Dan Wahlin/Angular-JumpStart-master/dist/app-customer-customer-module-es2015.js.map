{"version":3,"sources":["/./src/app/customer/customer-details/customer-details.component.html","/./src/app/customer/customer-edit/customer-edit.component.html","/./src/app/customer/customer-orders/customer-orders.component.html","/./src/app/customer/customer.component.html","/./src/app/customer/customer-details/customer-details.component.css","/./src/app/customer/customer-details/customer-details.component.ts","/./src/app/customer/customer-edit/customer-edit.component.css","/./src/app/customer/customer-edit/customer-edit.component.ts","/./src/app/customer/customer-orders/customer-orders.component.ts","/./src/app/customer/customer-routing.module.ts","/./src/app/customer/customer.component.ts","/./src/app/customer/customer.module.ts","/./src/app/customer/guards/can-activate.guard.ts","/./src/app/customer/guards/can-deactivate.guard.ts"],"names":[],"mappings":"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","file":"app-customer-customer-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"container\\\" *ngIf=\\\"customer\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-2\\\">\\n      <img src=\\\"assets/images/{{customer.gender | lowercase}}.png\\\" class=\\\"details-image\\\" />\\n    </div>\\n    <div class=\\\"col-md-10\\\">\\n      <h4>    \\n          {{ customer.firstName | capitalize }} {{ customer.lastName | capitalize }}&nbsp;          \\n      </h4>\\n      <br />\\n      {{ customer.address }}\\n      <br />\\n      {{ customer.city }}, {{ customer.state.name }}\\n    </div>\\n  </div>    \\n  <br /><br />\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\" *ngIf=\\\"customer && customer.latitude && customer.longitude\\\">\\n      <cm-map [latitude]=\\\"customer.latitude\\\" \\n           [longitude]=\\\"customer.longitude\\\" \\n           [zoom]=\\\"10\\\" \\n           [enabled]=\\\"mapEnabled\\\"\\n           [markerText]=\\\"'<h3>' + customer.firstName + ' ' + customer.lastName + '</h3>' + customer.city + ', ' + customer.state.name\\\"></cm-map>\\n    </div>\\n  </div>\\n</div>   \\n<div *ngIf=\\\"!customer\\\" class=\\\"container\\\">\\n   No customer found\\n</div>  \"","module.exports = \"<div>\\n  <form (ngSubmit)=\\\"submit()\\\" #customerForm=\\\"ngForm\\\" class=\\\"customer-form\\\" novalidate>\\n    <div class=\\\"form-group\\\">\\n      <label>First Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstName\\\" [(ngModel)]=\\\"customer.firstName\\\" #firstName=\\\"ngModel\\\" required>\\n      <div class=\\\"alert alert-danger\\\" [hidden]=\\\"firstName.pristine || firstName.valid\\\">First Name is required</div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label>Last Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastName\\\" [(ngModel)]=\\\"customer.lastName\\\" #lastName=\\\"ngModel\\\" required>\\n      <div class=\\\"alert alert-danger\\\" [hidden]=\\\"lastName.pristine || lastName.valid\\\">Last Name is required</div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label>Address</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"address\\\" [(ngModel)]=\\\"customer.address\\\" #address=\\\"ngModel\\\" required>\\n      <div class=\\\"alert alert-danger\\\" [hidden]=\\\"address.pristine || address.valid\\\">Address is required</div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label>City</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"city\\\" [(ngModel)]=\\\"customer.city\\\" #city=\\\"ngModel\\\" required>\\n      <div class=\\\"alert alert-danger\\\" [hidden]=\\\"city.pristine || city.valid\\\">City is required</div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label>State</label>\\n      <select class=\\\"form-control\\\" \\n              [(ngModel)]=\\\"customer.state.abbreviation\\\"\\n              name=\\\"state\\\" \\n              required>\\n          <option *ngFor=\\\"let state of states\\\" [ngValue]=\\\"state.abbreviation\\\">{{state.name}}</option>\\n      </select>\\n    </div>\\n    <div *ngIf=\\\"customer\\\">\\n      <div class=\\\"alert alert-warning\\\" *ngIf=\\\"customer.id && deleteMessageEnabled\\\">\\n         Delete Customer?&nbsp;&nbsp;<button class=\\\"btn btn-danger\\\" (click)=\\\"delete($event)\\\">Yes</button>&nbsp;&nbsp;\\n         <button class=\\\"btn btn-default\\\" (click)=\\\"deleteMessageEnabled = false\\\">No</button>\\n      </div>\\n      <button class=\\\"btn btn-danger\\\" *ngIf=\\\"customer.id && !deleteMessageEnabled\\\" (click)=\\\"deleteMessageEnabled = true\\\">Delete</button>&nbsp;&nbsp;\\n\\n      <div class=\\\"pull-right\\\" *ngIf=\\\"!deleteMessageEnabled\\\">\\n        <button class=\\\"btn btn-default\\\" (click)=\\\"cancel($event)\\\">Cancel</button>&nbsp;&nbsp;\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"customerForm.pristine || !customerForm.valid\\\">{{ operationText }}</button>\\n      </div>\\n    </div>\\n    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"errorMessage != null\\\">{{ errorMessage }}</div>\\n  </form>\\n  <br />\\n</div>\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\" *ngIf=\\\"customer && customer.orders\\\">\\n        <h4>Orders for {{ customer.firstName | capitalize }} {{ customer.lastName | capitalize }}</h4>\\n        <br />\\n        <table class=\\\"table table-striped table-hover orders-table\\\">\\n            <tr *ngFor=\\\"let order of customer.orders;trackBy:ordersTrackBy\\\">\\n                <td>{{ order.productName }}</td>\\n                <td class=\\\"text-right\\\">{{ order.itemCost | currency:'USD':'symbol' }}</td>    \\n            </tr>\\n            <tr class=\\\"summary-border\\\">\\n                <td>&nbsp;</td>\\n                <td class=\\\"text-right\\\">{{ customer.orderTotal | currency:'USD':'symbol' }}</td>\\n            </tr>\\n        </table>\\n    </div>\\n    <div *ngIf=\\\"customer && !customer.orders\\\" class=\\\"row\\\">\\n        No orders found\\n    </div> \\n    <div *ngIf=\\\"!customer\\\" class=\\\"row\\\">\\n        No customer found\\n    </div>  \\n</div>\"","module.exports = \"<div class=\\\"orders view\\\">\\n    <div class=\\\"container\\\">\\n        <header>\\n            <h3><span class=\\\"glyphicon glyphicon-user\\\"></span>&nbsp;&nbsp;Customer Information</h3>\\n        </header>\\n        <br />\\n        <div class=\\\"navbar\\\">\\n            <ul class=\\\"nav navbar-nav\\\">\\n                <li class=\\\"toolbar-item\\\">\\n                    <a routerLink=\\\"details\\\" routerLinkActive=\\\"active\\\">\\n                       <span class=\\\"glyphicon glyphicon-list\\\"></span>&nbsp;&nbsp;Customer Details\\n                    </a>\\n                </li>\\n                <li class=\\\"toolbar-item\\\">\\n                    <a routerLink=\\\"orders\\\" routerLinkActive=\\\"active\\\">\\n                        <span class=\\\"glyphicon glyphicon-tags\\\"></span>&nbsp;&nbsp;Customer Orders\\n                    </a>\\n                </li>\\n                <li class=\\\"toolbar-item\\\">\\n                    <a routerLink=\\\"edit\\\" routerLinkActive=\\\"active\\\">\\n                        <span class=\\\"glyphicon glyphicon-edit\\\"></span>&nbsp;&nbsp;Edit Customer\\n                    </a>\\n                </li>\\n            </ul>\\n        </div>\\n        <div class=\\\"container\\\">\\n            <router-outlet></router-outlet>\\n            <br />\\n            <br />\\n            <a routerLink=\\\"/customers\\\">View all Customers</a>\\n        </div>\\n    </div>\\n</div>\\n\\n\\n\\n\\n\\n\\n\"","module.exports = \".details-image {\\n    height:100px;width:100px;margin-top:10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY3VzdG9tZXIvY3VzdG9tZXItZGV0YWlscy9jdXN0b21lci1kZXRhaWxzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZLENBQUMsV0FBVyxDQUFDLGVBQWU7QUFDNUMiLCJmaWxlIjoic3JjL2FwcC9jdXN0b21lci9jdXN0b21lci1kZXRhaWxzL2N1c3RvbWVyLWRldGFpbHMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5kZXRhaWxzLWltYWdlIHtcbiAgICBoZWlnaHQ6MTAwcHg7d2lkdGg6MTAwcHg7bWFyZ2luLXRvcDoxMHB4O1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\n\nimport { ICustomer } from '../../shared/interfaces';\nimport { DataService } from '../../core/services/data.service';\n\n@Component({\n  selector: 'cm-customer-details',\n  templateUrl: './customer-details.component.html',\n  styleUrls: ['./customer-details.component.css']\n})\nexport class CustomerDetailsComponent implements OnInit {\n\n  customer: ICustomer;\n  mapEnabled: boolean;\n\n  constructor(private route: ActivatedRoute, private dataService: DataService) { }\n\n  ngOnInit() {\n    // Subscribe to params so if it changes we pick it up. Could use this.route.parent.snapshot.params[\"id\"] to simplify it.\n    this.route.parent.params.subscribe((params: Params) => {\n      const id = +params['id'];\n      if (id) {\n        this.dataService.getCustomer(id)\n          .subscribe((customer: ICustomer) => {\n            this.customer = customer;\n            this.mapEnabled = true;\n          });\n      }\n    });\n  }\n\n\n}\n","module.exports = \".customer-form input[type='text'], \\n.customer-form input[type='number'],\\n.customer-form input[type='email'],\\n.customer-form select {\\n    width:100%;\\n}\\n\\n.customer-form .ng-invalid {\\n  border-left: 5px solid #a94442;\\n}\\n\\n.customer-form .ng-valid {\\n  border-left: 5px solid #42A948;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY3VzdG9tZXIvY3VzdG9tZXItZWRpdC9jdXN0b21lci1lZGl0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7SUFJSSxVQUFVO0FBQ2Q7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEMiLCJmaWxlIjoic3JjL2FwcC9jdXN0b21lci9jdXN0b21lci1lZGl0L2N1c3RvbWVyLWVkaXQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jdXN0b21lci1mb3JtIGlucHV0W3R5cGU9J3RleHQnXSwgXG4uY3VzdG9tZXItZm9ybSBpbnB1dFt0eXBlPSdudW1iZXInXSxcbi5jdXN0b21lci1mb3JtIGlucHV0W3R5cGU9J2VtYWlsJ10sXG4uY3VzdG9tZXItZm9ybSBzZWxlY3Qge1xuICAgIHdpZHRoOjEwMCU7XG59XG5cbi5jdXN0b21lci1mb3JtIC5uZy1pbnZhbGlkIHtcbiAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCAjYTk0NDQyO1xufVxuXG4uY3VzdG9tZXItZm9ybSAubmctdmFsaWQge1xuICBib3JkZXItbGVmdDogNXB4IHNvbGlkICM0MkE5NDg7XG59Il19 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { NgForm } from '@angular/forms';\n\nimport { DataService } from '../../core/services/data.service';\nimport { ModalService, IModalContent } from '../../core/modal/modal.service';\nimport { ICustomer, IState } from '../../shared/interfaces';\nimport { GrowlerService, GrowlerMessageType } from '../../core/growler/growler.service';\nimport { LoggerService } from '../../core/services/logger.service';\n\n@Component({\n  selector: 'cm-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.css']\n})\nexport class CustomerEditComponent implements OnInit {\n\n  customer: ICustomer =\n    {\n      id: 0,\n      firstName: '',\n      lastName: '',\n      gender: '',\n      address: '',\n      city: '',\n      state: {\n        abbreviation: '',\n        name: ''\n      }\n    };\n  states: IState[];\n  errorMessage: string;\n  deleteMessageEnabled: boolean;\n  operationText = 'Insert';\n  @ViewChild('customerForm', { static: true }) customerForm: NgForm;\n\n  constructor(private router: Router,\n    private route: ActivatedRoute,\n    private dataService: DataService,\n    private growler: GrowlerService,\n    private modalService: ModalService,\n    private logger: LoggerService) { }\n\n  ngOnInit() {\n    // Subscribe to params so if it changes we pick it up. Don't technically need that here\n    // since param won't be changing while component is alive.\n    // Could use this.route.parent.snapshot.params[\"id\"] to simplify it.\n    this.route.parent.params.subscribe((params: Params) => {\n      const id = +params['id'];\n      if (id !== 0) {\n        this.operationText = 'Update';\n        this.getCustomer(id);\n      }\n    });\n\n    this.dataService.getStates().subscribe((states: IState[]) => this.states = states);\n  }\n\n  getCustomer(id: number) {\n    this.dataService.getCustomer(id).subscribe((customer: ICustomer) => {\n      this.customer = customer;\n    });\n  }\n\n  submit() {\n    if (this.customer.id === 0) {\n      this.dataService.insertCustomer(this.customer)\n        .subscribe((insertedCustomer: ICustomer) => {\n          if (insertedCustomer) {\n            // Mark form as pristine so that CanDeactivateGuard won't prompt before navigation\n            this.customerForm.form.markAsPristine();\n            this.router.navigate(['/customers']);\n          } else {\n            const msg = 'Unable to insert customer';\n            this.growler.growl(msg, GrowlerMessageType.Danger);\n            this.errorMessage = msg;\n          }\n        },\n          (err: any) => this.logger.log(err));\n    } else {\n      this.dataService.updateCustomer(this.customer)\n        .subscribe((status: boolean) => {\n          if (status) {\n            // Mark form as pristine so that CanDeactivateGuard won't prompt before navigation\n            this.customerForm.form.markAsPristine();\n            this.growler.growl('Operation performed successfully.', GrowlerMessageType.Success);\n            // this.router.navigate(['/customers']);\n          } else {\n            const msg = 'Unable to update customer';\n            this.growler.growl(msg, GrowlerMessageType.Danger);\n            this.errorMessage = msg;\n          }\n        },\n          (err: any) => this.logger.log(err));\n    }\n  }\n\n  cancel(event: Event) {\n    event.preventDefault();\n    // Route guard will take care of showing modal dialog service if data is dirty\n    this.router.navigate(['/customers']);\n  }\n\n  delete(event: Event) {\n    event.preventDefault();\n    this.dataService.deleteCustomer(this.customer.id)\n      .subscribe((status: boolean) => {\n        if (status) {\n          this.router.navigate(['/customers']);\n        } else {\n          this.errorMessage = 'Unable to delete customer';\n        }\n      },\n        (err) => this.logger.log(err));\n  }\n\n  canDeactivate(): Promise<boolean> | boolean {\n    if (!this.customerForm.dirty) {\n      return true;\n    }\n\n    // Dirty show display modal dialog to user to confirm leaving\n    const modalContent: IModalContent = {\n      header: 'Lose Unsaved Changes?',\n      body: 'You have unsaved changes! Would you like to leave the page and lose them?',\n      cancelButtonText: 'Cancel',\n      OKButtonText: 'Leave'\n    };\n    return this.modalService.show(modalContent);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\n\nimport { DataService } from '../../core/services/data.service';\nimport { ICustomer, IOrder, IOrderItem } from '../../shared/interfaces';\n\n@Component({\n  selector: 'cm-customer-orders',\n  templateUrl: './customer-orders.component.html'\n})\nexport class CustomerOrdersComponent implements OnInit {\n\n  orders: IOrder[] = [];\n  customer: ICustomer;\n\n  constructor(private route: ActivatedRoute, private dataService: DataService) { }\n\n  ngOnInit() {\n      // Subscribe to params so if it changes we pick it up.  Could use this.route.parent.snapshot.params[\"id\"] to simplify it.\n      this.route.parent.params.subscribe((params: Params) => {\n        const id = +params['id'];\n        this.dataService.getCustomer(id).subscribe((customer: ICustomer) => {\n          this.customer = customer;\n        });\n      });\n  }\n\n  ordersTrackBy(index: number, orderItem: any) {\n    return index;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CustomerComponent } from './customer.component';\nimport { CustomerOrdersComponent } from './customer-orders/customer-orders.component';\nimport { CustomerDetailsComponent } from './customer-details/customer-details.component';\nimport { CustomerEditComponent } from './customer-edit/customer-edit.component';\nimport { CanActivateGuard } from './guards/can-activate.guard';\nimport { CanDeactivateGuard } from './guards/can-deactivate.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CustomerComponent,\n    children: [\n      { path: 'orders', component: CustomerOrdersComponent },\n      { path: 'details', component: CustomerDetailsComponent },\n      {\n        path: 'edit',\n        component: CustomerEditComponent,\n        canActivate: [CanActivateGuard],\n        canDeactivate: [CanDeactivateGuard]\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [CanActivateGuard, CanDeactivateGuard]\n})\nexport class CustomerRoutingModule {\n  static components = [CustomerComponent, CustomerOrdersComponent, CustomerDetailsComponent, CustomerEditComponent];\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'cm-orders',\n  templateUrl: './customer.component.html'\n})\nexport class CustomerComponent implements OnInit {\n\n    // displayMode: CustomerDisplayModeEnum;\n    // displayModeEnum = CustomerDisplayModeEnum;\n\n    constructor(private router: Router) { }\n\n    ngOnInit() {\n\n      // No longer needed due to routerLinkActive feature in Angular\n      // const path = this.router.url.split('/')[3];\n      // switch (path) {\n      //   case 'details':\n      //     this.displayMode = CustomerDisplayModeEnum.Details;\n      //     break;\n      //   case 'orders':\n      //     this.displayMode = CustomerDisplayModeEnum.Orders;\n      //     break;\n      //   case 'edit':\n      //     this.displayMode = CustomerDisplayModeEnum.Edit;\n      //     break;\n      // }\n    }\n\n}\n\n// enum CustomerDisplayModeEnum {\n//   Details=0,\n//   Orders=1,\n//   Edit=2\n// }\n","import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { CustomerRoutingModule } from './customer-routing.module';\n\n@NgModule({\n  imports: [CustomerRoutingModule, SharedModule],\n  declarations: [CustomerRoutingModule.components]\n})\nexport class CustomerModule { }\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from '../../core/services/auth.service';\n\n@Injectable()\nexport class CanActivateGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.isAuthenticated) {\n        return true;\n    }\n\n    // Track URL user is trying to go to so we can send them there after logging in\n    this.authService.redirectUrl = state.url;\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CustomerEditComponent } from '../customer-edit/customer-edit.component';\nimport { LoggerService } from '../../core/services/logger.service';\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate<CustomerEditComponent> {\n\n  constructor(private logger: LoggerService) {}\n\n  canDeactivate(\n    component: CustomerEditComponent,\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n\n    this.logger.log(`CustomerId: ${route.parent.params['id']} URL: ${state.url}`);\n\n    // Check with component to see if we're able to deactivate\n    return component.canDeactivate();\n  }\n}\n"],"sourceRoot":""}